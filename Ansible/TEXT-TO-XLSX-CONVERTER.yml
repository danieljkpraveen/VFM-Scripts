commonfields:
  id: 7e5a250f-c7d0-42e1-8dd9-30fac4b58828
  version: 2
vcShouldKeepItemLegacyProdMachine: false
rolename:
- Account Admin
name: TEXT-TO-XLSX-CONVERTER
script: |
  import xlsxwriter
  import io
  import re


  def extract_rules(text):
      """
      Extract rules and their values from the input.
      Handles:
        - Rules ... =["...", "..."]
        - Rules ... - ["...", "..."]
        - Rules ... - ... (plain text)
        - Rules ... . ... (plain text)
      """
      # Pattern for rules with a list of values in brackets
      pattern_list = r'(Rules.*?)(?:=|-)\s*\[(.*?)\]'
      # Pattern for rules with a single value after dash or period
      pattern_single = r'(Rules.*?)(?:-|\.)(?!\s*\[)(.*?)(?=(?:Rules|$))'

      extracted = []

      # First, extract all rules with lists
      for match in re.finditer(pattern_list, text, re.DOTALL):
          rule_desc = match.group(1).strip().rstrip('= -').strip()
          values = match.group(2)
          result = ', '.join([v.strip().strip('"').strip("'")
                             for v in values.split(',')])
          extracted.append([rule_desc, result])

      # Remove already matched parts to avoid duplicates
      text_cleaned = re.sub(pattern_list, '', text, flags=re.DOTALL)

      # Now extract single-value rules (not followed by [ ... ])
      for match in re.finditer(pattern_single, text_cleaned, re.DOTALL):
          rule_desc = match.group(1).strip().rstrip('= -').strip()
          value = match.group(2).strip().strip('.').strip()
          if value:  # Only add if value is not empty
              extracted.append([rule_desc, value])

      return extracted


  def create_text_excel(data, filename):
      """Excel generation for plain text rules with auto-fit columns."""
      output = io.BytesIO()
      workbook = xlsxwriter.Workbook(output, {'in_memory': True})
      worksheet = workbook.add_worksheet()

      # Centered bold header format
      bold_center = workbook.add_format(
          {'bold': True, 'align': 'center', 'valign': 'vcenter'})

      # Prepare headers and combine with data for width calculation
      headers = ["Tasks", "Results"]
      all_rows = [headers] + data

      # Calculate max width for each column
      col_widths = [0, 0]
      for row in all_rows:
          for col, cell in enumerate(row):
              cell_len = len(str(cell))
              if cell_len > col_widths[col]:
                  col_widths[col] = cell_len

      # Add some padding for readability
      col_widths = [w + 2 for w in col_widths]

      # Set column widths
      worksheet.set_column(0, 0, col_widths[0])
      worksheet.set_column(1, 1, col_widths[1])

      # Write headers
      worksheet.write(0, 0, headers[0], bold_center)
      worksheet.write(0, 1, headers[1], bold_center)

      # Write data
      for i, row in enumerate(data, start=1):
          worksheet.write_row(i, 0, row)

      workbook.close()
      output.seek(0)
      # return fileResult(filename, output.read())
      with open(filename, 'wb') as f:
          f.write(output.read())


  def main():
      input_text = demisto.args().get()
      if not input_text:
          return_error("No input provided.")

      rules = extract_rules(input_text)
      filename = "rules.xlsx"
      create_text_excel(rules, filename)


  if __name__ == "__main__":
      main()
type: python
tags: []
enabled: true
args:
- name: Input
  required: true
outputs:
- contextPath: Output
  type: unknown
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/xslxwriter:1.0.0.117330
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
